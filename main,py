import os
import math
import cv2
import numpy as np
from PIL import Image
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import LeakyReLU
from keras.models import load_model
from skimage.measure import compare_ssim
import pdb


traindataset_path='coco128/images/'
original_images_path=os.path.join(traindataset_path,'train2017/')


def create_compressedimages(dataset_path,quality_factor):
    compressed_images_path=os.path.join(dataset_path, str(quality_factor)+'/')
    print(compressed_images_path)
    if not os.path.exists(dataset_path):
        os.mkdir(compressed_images_path)
    print(dataset_path)
    images_paths = []
    for path, folders, files in os.walk(dataset_path):
        for filename in files:
            if filename.endswith('.jpg'):
                filepath = os.path.join(path, filename)
                images_paths.append(filepath)
        
    for c, image_path in enumerate(images_paths):
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        
        jpeg_image_path = compressed_images_path + base_name + '_jpeg' + str(quality_factor) + '.jpeg'
        original_image = cv2.imread(image_path)
        # original_image_path=compressed_images_path +base_name +'.jpeg'
        # cv2.imwrite(original_image_path, original_image)
        cv2.imwrite(jpeg_image_path, original_image, [int(cv2.IMWRITE_JPEG_QUALITY), quality_factor])
        print(f"{c} :Saved {base_name}.jpeg")
# create_compressedimages(traindataset_path,10)

def load_image(image_path):
    image=np.array(Image.open(image_path))
    cropped_image = tf.image.random_crop(image,[64,64,3])
    cropped_image= np.array(cropped_image).astype("float32") / 255
    return cropped_image.astype("float32")
    
  
def load_data(dataset_path,quality_factor):
    original_images_path=os.path.join(dataset_path,'train2017/')
    compressed_images_path=os.path.join(dataset_path, str(quality_factor)+'/')
    X=[]
    Y=[]
    images_paths = []
    for path, folders, files in os.walk(dataset_path):
        for filename in files:
            if filename.endswith('.jpg'):
                filepath = os.path.join(path, filename)
                images_paths.append(filepath)
                
    for c, image_path in enumerate(images_paths):
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        image_path=original_images_path+base_name+'.jpg'
        compressed_image_path=compressed_images_path+base_name+"_jpeg"+str(quality_factor)+'.jpeg'
        X.append(load_image(image_path))
        Y.append(load_image(compressed_image_path))
        print(f'{c}: Added Image {base_name}')
    X=np.array(X).astype("float32")
    Y=np.array(Y).astype("float32")
    return X,Y
         
def dct_2d(feature_map,norm=None):
    X1 = tf.signal.dct(feature_map, type=2, norm=norm)
    X1_t = tf.transpose(X1, perm=[0, 1, 3, 2])
    X2 = tf.signal.dct(X1_t, type=2, norm=norm)
    X2_t = tf.transpose(X2, perm=[0, 1, 3, 2])
    return X2_t

def main():
    # image=load_image('COCO Dataset/train2017/train2017/000000000009.jpg')
    # compressed_image=load_image('COCO Dataset/train2017/10/000000000009_jpeg10.jpeg')
    model=Sequential()
    model.add(Conv2D(filters=16,kernel_size=(9,9)))
    model.add(LeakyReLU(alpha=0.1))
    model.add(Conv2D(filters=16,kernel_size=(3,3),strides=(2,2)))
    model.add(LeakyReLU(alpha=0.1))
    model.add(Conv2D(filters=16,kernel_size=(3,3)))
    model.add(LeakyReLU(alpha=0.1))
    model.add(Conv2D(filters=32,kernel_size=(3,3),strides=(2,2)))
    model.add(LeakyReLU(alpha=0.1))
    model.add(Conv2D(filters=32,kernel_size=(3,3)))
    model.add(LeakyReLU(alpha=0.1))
    model.add(Conv2D(filters=64,kernel_size=(3,3),strides=(2,2)))
    model.add(LeakyReLU(alpha=0.1))
    model.add(Conv2D(filters=32,kernel_size=(3,3)))
    model.add(LeakyReLU(alpha=0.1))
    model.add(Conv2D(filters=128,kernel_size=(1,1),strides=(2,2)))
    model.add(LeakyReLU(alpha=0.1))
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    X,Y=load_data(traindataset_path,10)
    X_val = X[-10:]
    Y_val = Y[-10:]
    X = X[:-10]
    Y = Y[:-10]
    model.fit(X,Y,batch_size=2,epochs=5,validation_data=(X_val,Y_val))
    model.summary()
    # path=traindataset_path+'sample.jpeg'
    # print(x)
    # cv2.imwrite(path,x)
    
main()